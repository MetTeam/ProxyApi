// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ProxyApi.Templates
{
    using ProxyApi;
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Development\ProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class ProxyTemplate : ProxyTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"
(function($) {
	""use strict"";

	if (!$) {
		throw ""jQuery is required"";
	}

	$.proxies = $.proxies || {};

	function getQueryString(params, queryString) {
		queryString = queryString || """";
		for(var prop in params) {
			if (params.hasOwnProperty(prop)) {
				var val = getArgValue(params[prop]);
				if (val === null) continue;

				if ("""" + val === ""[object Object]"") {
					queryString = getQueryString(params[prop], queryString);
					continue;
				}

				queryString += queryString.length ? ""&"" : ""?"";
				queryString += prop + ""="" + encodeURIComponent(val);
			}
		}
		return queryString;
	}

	function getArgValue(val) {
		if (val === undefined || val === null) return null;
		return val;
	}

	function invoke(url, type, urlParams, body) {
		url += getQueryString(urlParams);

		var ajaxOptions = $.extend({}, this.defaultOptions, {
			url: url,
			type: type
		});

		if (body) {
			ajaxOptions.data = body;
		}

		if (this.antiForgeryToken) {
			var token = $.isFunction(this.antiForgeryToken) ? this.antiForgeryToken() : this.antiForgeryToken;
			if (token) {
				ajaxOptions.headers = ajaxOptions.headers || {};
				ajaxOptions.headers[""");
            
            #line 57 "D:\Development\ProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ValidateHttpAntiForgeryTokenAttribute.RequestVerificationTokenHeader));
            
            #line default
            #line hidden
            this.Write(@"""] = token
			}
		}
	
		return $.ajax(ajaxOptions);
	}

	function defaultAntiForgeryTokenAccessor() {
		return $(""input[name=__RequestVerificationToken]"").val();
	}

	/* Proxies */

	/**
	 * @function
	 * @name Deferred.done
	 * @param {function(result:Object)} callback
	 */


");
            
            #line 77 "D:\Development\ProxyApi\ProxyApi\Templates\ProxyTemplate.tt"

	foreach(var definition in this.Definitions) { 
            
            #line default
            #line hidden
            this.Write("\t$.proxies.");
            
            #line 79 "D:\Development\ProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(definition.Name));
            
            #line default
            #line hidden
            this.Write(" = {\r\n\t\tdefaultOptions: {},\r\n\t\tantiForgeryToken: defaultAntiForgeryTokenAccessor," +
                    "\r\n");
            
            #line 82 "D:\Development\ProxyApi\ProxyApi\Templates\ProxyTemplate.tt"

	int lastActionIndex = definition.ActionMethods.Count()-1;
	int actionIndex = -1;
	foreach(var method in definition.ActionMethods) {
		actionIndex++;
	
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 89 "D:\Development\ProxyApi\ProxyApi\Templates\ProxyTemplate.tt"

	var allParameters = method.UrlParameters.AsEnumerable();
	
	if (method.BodyParameter != null) {
		allParameters = allParameters.Concat(new [] { method.BodyParameter });
	}

	var orderedParams = allParameters.Where(m => m != null)
							.OrderBy(m => m.Index)
							.ToArray();

	var parameterList = string.Join(",", orderedParams
							.Select(m => m.Name)
							.Concat(new [] { "additionalParameters" })
							.ToArray());

            
            #line default
            #line hidden
            this.Write("\t");
            
            #line 105 "D:\Development\ProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name));
            
            #line default
            #line hidden
            this.Write(":\r\n\t/**\r\n");
            
            #line 107 "D:\Development\ProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
 foreach(var parameter in orderedParams) { 
            
            #line default
            #line hidden
            this.Write("\t * @param {");
            
            #line 108 "D:\Development\ProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Type.JsDocTypeString()));
            
            #line default
            #line hidden
            this.Write("} ");
            
            #line 108 "D:\Development\ProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 108 "D:\Development\ProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Type.ToString()));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 109 "D:\Development\ProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t * @param {Object} additionalParameters\r\n\t * @return {Deferred}\r\n\t */\r\n\tfunction" +
                    "(");
            
            #line 113 "D:\Development\ProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameterList));
            
            #line default
            #line hidden
            this.Write(") {\r\n\t\treturn invoke.call(this, \"");
            
            #line 114 "D:\Development\ProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Url));
            
            #line default
            #line hidden
            this.Write("\", \"");
            
            #line 114 "D:\Development\ProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Type.ToString().ToLower()));
            
            #line default
            #line hidden
            this.Write("\", \r\n\t\t\t$.extend({},\r\n");
            
            #line 116 "D:\Development\ProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
 if (method.UrlParameters.Any()) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t{\r\n");
            
            #line 118 "D:\Development\ProxyApi\ProxyApi\Templates\ProxyTemplate.tt"

int lastParamIndex = orderedParams.Length-1;
foreach (var parameter in orderedParams) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t");
            
            #line 121 "D:\Development\ProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write(": arguments[");
            
            #line 121 "D:\Development\ProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Index));
            
            #line default
            #line hidden
            this.Write("]");
            
            #line 121 "D:\Development\ProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(lastParamIndex==parameter.Index?String.Empty:","));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 122 "D:\Development\ProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t}, additionalParameters)\r\n");
            
            #line 124 "D:\Development\ProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write(" additionalParameters)\r\n");
            
            #line 125 "D:\Development\ProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 126 "D:\Development\ProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
 if (method.BodyParameter != null) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t, arguments[");
            
            #line 127 "D:\Development\ProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.BodyParameter.Index));
            
            #line default
            #line hidden
            this.Write("]);\r\n");
            
            #line 128 "D:\Development\ProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\t\t\t);\r\n");
            
            #line 130 "D:\Development\ProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t}");
            
            #line 131 "D:\Development\ProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(lastActionIndex==actionIndex?String.Empty:","));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 132 "D:\Development\ProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("};\r\n");
            
            #line 134 "D:\Development\ProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("}(jQuery));");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class ProxyTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
